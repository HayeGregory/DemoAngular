requirements :
- installer nodeJS (version LTS) : npm -v, node -v pour check les versions
- installer Angular : npm i -g @angular/cli , ng version pour check la version
- installer VS code (extension : Angular schematics, Angular Snippets, Angular Language Service)
    (extensions en plus : bracket pair colorizer, Material icon theme, prettier coe formatter)

Creation du projet :
- ng new [nomProjet] --skip-tests --routing
(le mode strict sera a true : a changer dans le fichier tsconfig.json si necessaire)
- repondre y pour Angular routing
- choisir scss pour le template css
- verifier que l'app tourne : ng serve --o [--port=42xx] 
- navigateur  : localhost

Commande ng : 
creer un module (ajouter --routing pour inclure nom-routing.module.ts): 
    ng g m [nomModule]
creer un composant : 
    ng g c [nomComposant]
creer un composant a inclure dans un module existant : 
    ng g c [nomComposant] -m [nomModuleExistant]

========================================================================
composant home et about + navigation de base 
- creer les composant dans un dossier components
- app-routing.module.ts : ajouter le path vers home et about
- app.component.html : liens href / routerLink + router-outlet

possibilite architecture liens/sousliens (/home/about par ex)
- modifier le path dans app-routing.module.ts en specifiant about children de home

========================================================================
navigation inter-module :
cas : 
liens principaux au niveau du module parent:  app-routing.module.ts
liens secondaires au niveau du module enfant: demo-routing.module.ts
- preparer un composant nav : html avec les routerlink, css
- rajouter la structure html (header/nav/content) dans app.component.html
- creer un module demo avec --routing
- creer un composant à inclure dans le module demo
- creer un composant demo01 dans demo
- rajouter le router-outlet dans demo.components.html
- definir les path dans le demo-routing.module.ts (avec un children)
- dans app.module.ts definir l’import : demoRoutingModule
- Definir les routes dans app-routing.module.ts avec un loadchildren import(chemin du module ).then m.Demomodule

========================================================================
Binding one way , two way
- pour l'utilisation des formulaire : FormsModule à importer dans le module concerné

========================================================================
Binding event
- lier un event JS à une methode dans ts : (click)="maMethode()" 

========================================================================
Attribute Binding
- desactiver un bouton via une condition & une methode changeant une valeur
- entourer un attribut html par exemple de [] afin de l'associer a une condition(html) (boolean dans ts)
========================================================================
Pipe et custom pipes
- creer un dossier pipes
- creer un custom pipe : ng generate pipe [nom du pipe]
    - premier param : sur quel propriete on va travailler (le type doit correspondre)
    - dans args: unknown[] les params eventuels
    - specifier le type de retour
- creer un module shared : ng g m shared
    - specifier la declaration et l'export du pipe 
    - dans le module importer  le sharedModule
    - attention il peut detecter plusieurs modules et faire des imports auto sur app module alors qu'on veut l'utiliser dans demomodule
========================================================================
Exercices chrono
- separer la logique d'affichage de votre logique de composant :
    - logique du composant chrono : 
        gerer un setinterval pour avoir un nombre de secondaires
        liaison avec le template html (bouton , bindings)
    - et une logique d'affichage qui va transformer le nombre de 
        seconde en minutes secondes grace au pipe

- creer la partie html
- binder les elements 
 verifier si le compteur de seoncdes fonctionne binder
- creation du pipe dans le dossier pipes
- ne pas oublier de l'ajouter dans le shared module en tant qu'import et exports
- une erreur peut survenir me disant que le pipe est declare a pl. endroits , 
    verifier qu'il soit pas present dans l'app.module, si oui le retirer
    car c'est notre exo.module qui utilisera notre pipe
=========================================================================
Directives ngStyle ngClass
--> voir demo 06
=========================================================================
Directives Structurelles ngIf ngForngSwitch
--> voir demo 07
=========================================================================
Directive custom de survol
--> prevoir un dossier pour les Directives
--> creer la directive dans ce dossier avec :
    ng g directive nomDirective
--> implementer la directive
    - la directive s'applique sur un element du dom , recuperable via elementRef
        --> l'injecter dns le constructor de la directive
        --> ensuite on a la possibilite d'appliquer un style comme par exemple :
            el.nativeElement.style.backgroundColor
    un survol implique d'ecouter des event mouseenter et mouseleave
    - cela implique de creer deux methodes hostlistener( s'assurer de l'import)
--> passer par le sharedModule et retirer l'import au niveau de l'app.module, relancer  ng s
=========================================================================
Exercices menu avec directive structurelles :
--> prevoir une classe link (url, title, children visible) , ? pour rendre nullable la propriete
--> dans le fichier nav.ts : prevoir une variable tableau de links
    - initialiser votre tableau avec les liens du menu 
    - prevoir une methode pour switcher un element du tableau de liens en visible ou pas (toggleVisible)
--> dans le template , double boucle sur les li , utiliser l'index pour utiliser la methode toogleVisible
=========================================================================
communication parent - enfant :

creer les deux composant : 
- parent(demo08)
- enfant (declare dans le composant parent)
- mettre le selecteur enfant dans le template parent (verifier si c'est ok)

- @input :

   - dans le ts enfant : prevoir une propriete @input
   - dans le template html enfant : binding de cette variable
   - dans le template parent : appeler le selecteur avec la variable input decleré dans l'enfant
     --> <app-enfant nomVariableInput="..."> </app-enfant> 

- @output :

    - dans le ts enfant : 
        - prevoir une propriete @output de type EventEmitter, l'initialiser
        - prevoir un moyen d'emettre le type de message : event.emit .... (via methode ici)
        - dans le template html parent : reagir a notre event (@output enfant) en l'associant avec une methode
        - dans le ts du parent definir la methode qui est binder sur l'event

- ng-content : 
    - mettre les selector ng-content dans l' enfant à l'endroit souhaite
    - dans le parent au sein du selecteur enfant , mettre ce qu'on a besoin
 ==============================================================================
 correction shopping-list ==> exo02
 ==============================================================================     
 demo09:  Service
 but de la demo : 
 un composant container avec 2 composant enfants et faire communiquer les deux enfants entre eux
 - creer le composant enfant
 - creer un composant add-word : qui devra ajouter un mot 
 - creer un composant list-word : qui devra lister les mots rajoutés
 - mettre ces deux composant dans le composant container (demo09)

 - creer le service manuellement dans un dossier service 
    -> le nommer : word.service.ts --> on constate qu'il est reconnu en service grace a l'icone jaune
 - ajouter une propriete list de mots ( represente la source de donnee a partager aux composant)

 - au sein des enfants pour injecter le service on passera par le constructor :
    constructor(private wordService: WordService) {}
 - on constate maintenant qu'on dispose via wordservice de la liste de mots
 - on peut des lors dans l'enfant add-word mettre en place le mecanisme pour ajouter un mot 
 - nous avons un probleme d'injection car nous n'avons pas specifié le provider
  --> on peut le specifier sur app.module.ts dans le tableau providers
      et sera disponible partout
  --> on peut le specifier dans le .ts du composant au niveau du decorateur (selector, template, css)
      en rajoutant la cle :   providers: [WordService]
  --> specifiable au niveau du composant enfant 
      mais ne sera donc pas disponible au niveau de l'autre enfant

 - on peut maintenant ajouter des methodes dans notre service :
    - addOne
    - removeOne (index : number)
    ....
    ===> on pourra effectuer un crud sur la ressource qu'on aura ramene (api,...)

 - on peut donc encapsuler la liste de mot en la passant en mode prive ( adapter le code )

 On peut injecter un service dans un autre service :
 - creer le service avec CLI : ng g service nomService (ici Log)
 - implementer une methode log(message)
 - l'injecter via le constructor
 - dans la methode removeOne , utiliser notre logService pour afficher en console
 - on constate un soucis d'injection --> se resoud en ajoutant le decorateur @injectable() 
   sur le service : wordService
========================================================================================